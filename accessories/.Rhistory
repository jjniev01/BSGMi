require(raster)
require(FNN)
root <- "E:/"
indir <- paste0(root,"Datasets/ESA CCI LC 2018/")
outdir <- paste0(root,"Research/RF_Buildings/Data/Derived/ESA_LC_2018/")
tmpdir <- paste0(root,"Research/RF_Buildings/Data/tmp/")
##  FUNCTION DEFINITION  -----
####  DTE CALCULATION FUNCTION  ------------------------------------------------
calcDTE <- function(in_ras_path, outfile_path){
##  WARNING: THIS IS USED FOR SMALL AREAS ~ 500km x 500km for the GUF+ data
##  NOTE:  Requires the raster and FNN packages
####  Constants
##  Earth radius in meters:
e_radius <- 6378100
##  haversine function definition with location dependent radius:
calcHav <- function(lat1,lat2,lon1,lon2){
##  Transfer coordinates to radians:
lat1 <- lat1* pi/180
lat2 <- lat2* pi/180
lon1 <- lon1* pi/180
lon2 <- lon2* pi/180
havdist <- 2 * e_radius * asin(sqrt(sin({lat2-lat1}/2)^2 +
cos(lat1)*cos(lat2)*
sin({lon2-lon1}/2)^2))
return(havdist)
}
####
##  Bring in the binary raster:
inras <- raster(in_ras_path)
print("Retrieving non-NA cell indices...")
##  Get the cell indices of the non-NA cells:
cellind <- which(!is.na(values(inras)))
##  Get the coordinates of all non-NA cells:
studyarea_coords <- xyFromCell(inras,
cellind,
spatial = FALSE)
##  Copy as a template raster:
template_ras <-inras
##  Turn all zeros into NA:
oneras <- inras
oneras[which(values(inras)==0)] <- NA
##  Determine the boundary pixels of that raster:
boundras <- boundaries(oneras,
type = "inner",
classes = FALSE,
directions = 8,
asNA = FALSE)
##  Get the coordinates of the boundary raster cells that have a value of 1:
boundarycoords <- xyFromCell(boundras,
which(values(boundras)==1),
spatial = FALSE)
rm(boundras,oneras)
gc()
##  Determine the nearest boundary pixel for all pixels:
##  Note this follows the order of the cell indices in studyarea_coords.
nn_indices <- get.knnx(boundarycoords,
studyarea_coords,
algorithm = "kd_tree",
k = 1)$nn.index
##  Coallate the records:
foo_frame <- data.frame("CID" = cellind,
"LAT" = studyarea_coords[, 2],
"LON" = studyarea_coords[, 1],
"NN_ID" = nn_indices,
"NLAT" = boundarycoords[nn_indices, 2],
"NLON" = boundarycoords[nn_indices, 1])
print("Calculating haversine distance between cells and neighbors...")
##  Calculate the haversine distance:
foo_frame <- foo_frame %>% mutate(HDIST = calcHav(LAT,NLAT,LON,NLON))
print("Writing DTE values to raster...")
##  Place the values in the raster:
template_ras[foo_frame$CID] <- foo_frame$HDIST
print("Making inner values negative...")
##  Make the cells which were inside the binary area negative:
foocid <- which(values(inras)==1)
template_ras[foocid] <- -1 * template_ras[foocid]
print("Writing DTE raster to file...")
writeRaster(template_ras,
filename = outfile_path,
format = "GTiff",
datatype = "FLT8S",
overwrite = T,
options = c("COMPRESS = LZW"))
}
iso <- "UGA"
##  DATA IMPORTATION AND CROPPING  -----
##  Bring in the extents of our study area in order to clip the global LC
##  raster:
in_ext <- extent(raster(paste0(root, "Research/RF_Buildings/Data/",iso,"/",
tolower(iso),"_grid_100m_ccidadminl1.tif")))
paste0(root, "Research/RF_Buildings/Data/",iso,"/",
tolower(iso),"_grid_100m_ccidadminl1.tif")
##  DATA IMPORTATION AND CROPPING  -----
##  Bring in the extents of our study area in order to clip the global LC
##  raster:
in_ext <- extent(raster(paste0(root, "Research/RF_Buildings/Data/!Raw/",iso,"/",
tolower(iso),"_grid_100m_ccidadminl1.tif")))
##  Add a 30km buffer to minimize any edge effects in our DTE calculations:
in_ext <- inext + {30000/30.87/60/60}
##  Add a 30km buffer to minimize any edge effects in our DTE calculations:
in_ext <- in_ext + {30000/30.87/60/60}
##  DATA IMPORTATION AND CROPPING  -----
##  Bring in the extents of our study area in order to clip the global LC
##  raster:
in_ext <- extent(raster(paste0(root, "Research/RF_Buildings/Data/!Raw/",iso,"/",
tolower(iso),"_grid_100m_ccidadminl1.tif")))
in_ext
in_ext + {30000/30.87/60/60}
##  Add a 30km buffer to minimize any edge effects in our DTE calculations:
in_ext <- in_ext + {30000/30.87/60/60}
##  Bring in the landcover:
lc_raw <- raster(paste0(indir,"C3S-LC-L4-LCCS-Map-300m-P1Y-2018-v2.1.1.nc"))
install.packages("ncdf4")
##  Bring in the landcover:
lc_raw <- raster(paste0(indir,"C3S-LC-L4-LCCS-Map-300m-P1Y-2018-v2.1.1.nc"))
##  Crop the raster:
crop(lc_raw,in_ext,
filename = paste0(tmpdir, "ESA_LC_2018_cropped.tif"),
format="GTiff",
datatype="INT2U",
overwrite = T,
options=c("COMPRESS = LZW"))
rm(lc_raw)
##  Reclassification vectors (inclusive left and right):
from_vals <- c(10,40,150,160,189,199,209)
to_vals <- c(30,120,153,180,191,201,211)
new_vals <- c(11,40,150,160,190,200,210)
##  RECLASSIFICATION AND RESAMPLING  -----
##  Bring the LC back in:
lc_crop <- raster(paste0(tmpdir,"ESA_LC_2018_cropped.tif"))
##  SEt up our reclassification matrix:
rc_matrix <- as.matrix( from_vals,# From column (inclusive)
to_vals,# To column (inclusive)
new_vals,# New value column
ncol = 3)
rc_matrix
##  SEt up our reclassification matrix:
rc_matrix <- as.matrix( c(from_vals,# From column (inclusive)
to_vals,# To column (inclusive)
new_vals),# New value column
ncol = 3)
rc_matric
rc_matrix
?as.matrix
##  SEt up our reclassification matrix:
rc_matrix <- matrix( c(from_vals,# From column (inclusive)
to_vals,# To column (inclusive)
new_vals),# New value column
ncol = 3)
rc_matrix
reclassify(lc_crop,
rcl = rc_matrix,
filename = paste0(tmpdir, "ESA_LC_2018_crop_reclass.tif"),
include.lowest = T,
right = T,
format = "GTiff",
datatype = "INT2U",
overwrite = T,
options = c("COMPRESS = LZW"))
rm(lc_crop)
lc_reclass <- raster(paste0(tmpdir, "ESA_LC_2018_crop_reclass.tif"))
plot(lc_reclass)
lc_reclass <- raster(paste0(tmpdir, "ESA_LC_2018_crop_reclass.tif"))
resample(lc_reclass,
raster(tmplate = in_ext,
crs = CRS("+proj=longlat +datum=WGS84"),
resolution = 0.0008333),
method = "ngb",
filename = paste0(tmpdir,"ESA_LC_2018_crop_reclass_resamp.tif"),
datatype = "INT2U",
format = "GTiff",
overwrite = T,
options = c("COMPRESS = LZW"))
resample(lc_reclass,
raster(template = in_ext,
crs = CRS("+proj=longlat +datum=WGS84"),
resolution = 0.0008333),
method = "ngb",
filename = paste0(tmpdir,"ESA_LC_2018_crop_reclass_resamp.tif"),
datatype = "INT2U",
format = "GTiff",
overwrite = T,
options = c("COMPRESS = LZW"))
template_ras <- raster(template = in_ext,
crs = CRS("+proj=longlat +datum=WGS84"),
resolution = 0.0008333)
?raster
##  DATA IMPORTATION AND CROPPING  -----
##  Bring in the extents of our study area in order to clip the global LC
##  raster:
template_ras <- raster(paste0(root, "Research/RF_Buildings/Data/!Raw/",iso,"/",
tolower(iso),"_grid_100m_ccidadminl1.tif"))
resample(lc_reclass,
template_ras,
method = "ngb",
filename = paste0(tmpdir,"ESA_LC_2018_crop_reclass_resamp.tif"),
datatype = "INT2U",
format = "GTiff",
overwrite = T,
options = c("COMPRESS = LZW"))
unique(values(lc_reclass))
